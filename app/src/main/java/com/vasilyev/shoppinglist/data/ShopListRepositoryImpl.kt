import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import com.vasilyev.shoppinglist.domain.ShopItem
import com.vasilyev.shoppinglist.domain.ShopListRepository
import java.lang.RuntimeException
import kotlin.random.Random

object ShopListRepositoryImpl: ShopListRepository {
    private val shopList = mutableListOf<ShopItem>()

    private val shopListLiveData = MutableLiveData<List<ShopItem>>()
    private var autoGeneratedId: Int = 0

    init {
        for (i in 0..100){
            addShopItem(ShopItem(
                name = "Name $i",
                count = i,
                enabled = Random.nextBoolean()
            ))
        }
    }

    override fun addShopItem(shopItem: ShopItem) {
        shopItem.id = autoGeneratedId++
        shopList.add(shopItem)
        updateList()
    }

    override fun editShopItem(shopItem: ShopItem) {
        val oldElement = getShopItem(shopItem.id)
        val index = shopList.indexOf(oldElement)
        shopList[index] = shopItem
        updateList()
    }

    override fun getShopItem(id: Int): ShopItem {
        return shopList.find {
            it.id == id
        } ?: throw RuntimeException("Element with id: $id not found")
    }

    override fun getShopList(): LiveData<List<ShopItem>> {
        return shopListLiveData
    }

    override fun deleteShopItem(shopItem: ShopItem) {
        shopList.remove(shopItem)
        updateList()
    }

    private fun updateList(){
        shopListLiveData.value = shopList.toList()
    }
}